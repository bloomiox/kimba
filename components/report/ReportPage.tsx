import React, { useState, useMemo } from 'react';
import { useSettings } from '../../contexts/SettingsContext';
import Card from '../common/Card';
import { BarChartIcon, DollarSignIcon, ClipboardListIcon, UsersIcon } from '../common/Icons';
import ReportModal from './ReportModal';
import type { Sale, Appointment, Client, Service } from '../../types';
// FIX: Import the `Button` component to resolve the "Cannot find name 'Button'" error.
import Button from '../common/Button';
import { getTodayString, formatDateForStorage } from '../../utils/dateUtils';

type ReportType = 'salesSummary' | 'servicePerformance' | 'dailyCloseout' | 'clientList';

const ReportPage: React.FC = () => {
  const { t, sales, appointments, services, clients } = useSettings();
  const today = getTodayString();
  const [startDate, setStartDate] = useState(today);
  const [endDate, setEndDate] = useState(today);
  const [viewingReport, setViewingReport] = useState<ReportType | null>(null);

  const setDateRange = (preset: 'today' | '7days' | '30days' | 'month') => {
    const end = new Date();
    let start = new Date();
    if (preset === 'today') {
        start.setDate(end.getDate());
    } else if (preset === '7days') {
        start.setDate(end.getDate() - 6);
    } else if (preset === '30days') {
        start.setDate(end.getDate() - 29);
    } else if (preset === 'month') {
        start = new Date(end.getFullYear(), end.getMonth(), 1);
    }
    setStartDate(formatDateForStorage(start));
    setEndDate(formatDateForStorage(end));
  };

  const filteredData = useMemo(() => {
    const start = new Date(`${startDate}T00:00:00`);
    const end = new Date(`${endDate}T23:59:59`);

    const filteredSales = sales.filter(sale => {
      const saleDate = new Date(sale.createdAt);
      return saleDate >= start && saleDate <= end;
    });

    const filteredAppointments = appointments.filter(app => {
        const appDate = new Date(app.date);
        return appDate >= start && appDate <= end;
    });

    return { sales: filteredSales, appointments: filteredAppointments, clients, services };
  }, [startDate, endDate, sales, appointments, clients, services]);
  
  const reportCards = [
      {
          id: 'salesSummary',
          title: "Sales Summary",
          description: "Detailed breakdown of revenue, tips, taxes, and payment methods.",
          icon: DollarSignIcon,
      },
      {
          id: 'servicePerformance',
          title: "Service Performance",
          description: "Analyze popularity and revenue generated by each service.",
          icon: ClipboardListIcon,
      },
       {
          id: 'dailyCloseout',
          title: "Daily Closeout",
          description: "End-of-day summary for sales and payments. Select a single day.",
          icon: BarChartIcon,
      },
       {
          id: 'clientList',
          title: "Full Client List",
          description: "A complete, printable list of all clients and their contact details.",
          icon: UsersIcon,
      },
  ];

  return (
    <div className="animate-fade-in">
      <h2 className="text-3xl font-bold mb-6">{t('sidebar.report')}</h2>
      
      <Card className="mb-6">
          <div className="flex flex-wrap items-center gap-4">
              <div className="flex-grow">
                  <label htmlFor="start-date" className="text-sm font-medium">Start Date</label>
                  <input type="date" id="start-date" value={startDate} onChange={e => setStartDate(e.target.value)} className="w-full p-2 bg-white dark:bg-gray-900 border border-gray-300 dark:border-gray-600 rounded-lg"/>
              </div>
              <div className="flex-grow">
                  <label htmlFor="end-date" className="text-sm font-medium">End Date</label>
                  <input type="date" id="end-date" value={endDate} onChange={e => setEndDate(e.target.value)} className="w-full p-2 bg-white dark:bg-gray-900 border border-gray-300 dark:border-gray-600 rounded-lg"/>
              </div>
              <div className="flex gap-2 pt-5">
                  <button onClick={() => setDateRange('today')} className="px-3 py-2 text-sm bg-gray-200 dark:bg-gray-700 rounded-lg">Today</button>
                  <button onClick={() => setDateRange('7days')} className="px-3 py-2 text-sm bg-gray-200 dark:bg-gray-700 rounded-lg">Last 7 Days</button>
                  <button onClick={() => setDateRange('month')} className="px-3 py-2 text-sm bg-gray-200 dark:bg-gray-700 rounded-lg">This Month</button>
              </div>
          </div>
      </Card>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {reportCards.map(report => (
             <Card key={report.id}>
                <div className="flex flex-col h-full">
                    <div className="flex items-start gap-4">
                        <div className="w-12 h-12 bg-accent/10 rounded-lg flex items-center justify-center flex-shrink-0">
                            <report.icon className="w-6 h-6 text-accent"/>
                        </div>
                        <div>
                            <h3 className="text-lg font-bold">{report.title}</h3>
                            <p className="text-sm text-gray-500 dark:text-gray-400 mt-1">{report.description}</p>
                        </div>
                    </div>
                    <div className="mt-4 pt-4 border-t dark:border-gray-700 flex-grow flex items-end">
                        <Button onClick={() => setViewingReport(report.id as ReportType)} className="w-full">
                            Generate Report
                        </Button>
                    </div>
                </div>
            </Card>
        ))}
      </div>
      
      {viewingReport && (
          <ReportModal 
            reportType={viewingReport} 
            data={filteredData}
            dateRange={{start: startDate, end: endDate}}
            onClose={() => setViewingReport(null)} 
          />
      )}
    </div>
  );
};

export default ReportPage;
